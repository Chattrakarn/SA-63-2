// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/User/app/ent/drug"
	"github.com/User/app/ent/form"
	"github.com/User/app/ent/schema"
	"github.com/User/app/ent/unit"
	"github.com/User/app/ent/user"
	"github.com/User/app/ent/volume"
)

// The init function reads all schema descriptors with runtime
// code (default values, validators or hooks) and stitches it
// to their package variables.
func init() {
	drugFields := schema.Drug{}.Fields()
	_ = drugFields
	// drugDescDrugType is the schema descriptor for DrugType field.
	drugDescDrugType := drugFields[0].Descriptor()
	// drug.DrugTypeValidator is a validator for the "DrugType" field. It is called by the builders before save.
	drug.DrugTypeValidator = drugDescDrugType.Validators[0].(func(string) error)
	// drugDescStrength is the schema descriptor for Strength field.
	drugDescStrength := drugFields[1].Descriptor()
	// drug.StrengthValidator is a validator for the "Strength" field. It is called by the builders before save.
	drug.StrengthValidator = drugDescStrength.Validators[0].(func(int) error)
	// drugDescInformation is the schema descriptor for Information field.
	drugDescInformation := drugFields[2].Descriptor()
	// drug.InformationValidator is a validator for the "Information" field. It is called by the builders before save.
	drug.InformationValidator = drugDescInformation.Validators[0].(func(string) error)
	formFields := schema.Form{}.Fields()
	_ = formFields
	// formDescFormType is the schema descriptor for FormType field.
	formDescFormType := formFields[0].Descriptor()
	// form.FormTypeValidator is a validator for the "FormType" field. It is called by the builders before save.
	form.FormTypeValidator = formDescFormType.Validators[0].(func(string) error)
	unitFields := schema.Unit{}.Fields()
	_ = unitFields
	// unitDescUnitType is the schema descriptor for UnitType field.
	unitDescUnitType := unitFields[0].Descriptor()
	// unit.UnitTypeValidator is a validator for the "UnitType" field. It is called by the builders before save.
	unit.UnitTypeValidator = unitDescUnitType.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUsername is the schema descriptor for Username field.
	userDescUsername := userFields[0].Descriptor()
	// user.UsernameValidator is a validator for the "Username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for Email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "Email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for Password field.
	userDescPassword := userFields[2].Descriptor()
	// user.PasswordValidator is a validator for the "Password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	volumeFields := schema.Volume{}.Fields()
	_ = volumeFields
	// volumeDescVolumeType is the schema descriptor for VolumeType field.
	volumeDescVolumeType := volumeFields[0].Descriptor()
	// volume.VolumeTypeValidator is a validator for the "VolumeType" field. It is called by the builders before save.
	volume.VolumeTypeValidator = volumeDescVolumeType.Validators[0].(func(string) error)
}
