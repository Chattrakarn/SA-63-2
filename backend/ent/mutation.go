// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/User/app/ent/drug"
	"github.com/User/app/ent/form"
	"github.com/User/app/ent/unit"
	"github.com/User/app/ent/user"
	"github.com/User/app/ent/volume"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDrug   = "Drug"
	TypeForm   = "Form"
	TypeUnit   = "Unit"
	TypeUser   = "User"
	TypeVolume = "Volume"
)

// DrugMutation represents an operation that mutate the Drugs
// nodes in the graph.
type DrugMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_DrugType     *string
	_Strength     *int
	add_Strength  *int
	_Information  *string
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	form          *int
	clearedform   bool
	unit          *int
	clearedunit   bool
	volume        *int
	clearedvolume bool
	done          bool
	oldValue      func(context.Context) (*Drug, error)
}

var _ ent.Mutation = (*DrugMutation)(nil)

// drugOption allows to manage the mutation configuration using functional options.
type drugOption func(*DrugMutation)

// newDrugMutation creates new mutation for $n.Name.
func newDrugMutation(c config, op Op, opts ...drugOption) *DrugMutation {
	m := &DrugMutation{
		config:        c,
		op:            op,
		typ:           TypeDrug,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDrugID sets the id field of the mutation.
func withDrugID(id int) drugOption {
	return func(m *DrugMutation) {
		var (
			err   error
			once  sync.Once
			value *Drug
		)
		m.oldValue = func(ctx context.Context) (*Drug, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Drug.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDrug sets the old Drug of the mutation.
func withDrug(node *Drug) drugOption {
	return func(m *DrugMutation) {
		m.oldValue = func(context.Context) (*Drug, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DrugMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DrugMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DrugMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDrugType sets the DrugType field.
func (m *DrugMutation) SetDrugType(s string) {
	m._DrugType = &s
}

// DrugType returns the DrugType value in the mutation.
func (m *DrugMutation) DrugType() (r string, exists bool) {
	v := m._DrugType
	if v == nil {
		return
	}
	return *v, true
}

// OldDrugType returns the old DrugType value of the Drug.
// If the Drug object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DrugMutation) OldDrugType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDrugType is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDrugType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDrugType: %w", err)
	}
	return oldValue.DrugType, nil
}

// ResetDrugType reset all changes of the "DrugType" field.
func (m *DrugMutation) ResetDrugType() {
	m._DrugType = nil
}

// SetStrength sets the Strength field.
func (m *DrugMutation) SetStrength(i int) {
	m._Strength = &i
	m.add_Strength = nil
}

// Strength returns the Strength value in the mutation.
func (m *DrugMutation) Strength() (r int, exists bool) {
	v := m._Strength
	if v == nil {
		return
	}
	return *v, true
}

// OldStrength returns the old Strength value of the Drug.
// If the Drug object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DrugMutation) OldStrength(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStrength is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStrength requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStrength: %w", err)
	}
	return oldValue.Strength, nil
}

// AddStrength adds i to Strength.
func (m *DrugMutation) AddStrength(i int) {
	if m.add_Strength != nil {
		*m.add_Strength += i
	} else {
		m.add_Strength = &i
	}
}

// AddedStrength returns the value that was added to the Strength field in this mutation.
func (m *DrugMutation) AddedStrength() (r int, exists bool) {
	v := m.add_Strength
	if v == nil {
		return
	}
	return *v, true
}

// ResetStrength reset all changes of the "Strength" field.
func (m *DrugMutation) ResetStrength() {
	m._Strength = nil
	m.add_Strength = nil
}

// SetInformation sets the Information field.
func (m *DrugMutation) SetInformation(s string) {
	m._Information = &s
}

// Information returns the Information value in the mutation.
func (m *DrugMutation) Information() (r string, exists bool) {
	v := m._Information
	if v == nil {
		return
	}
	return *v, true
}

// OldInformation returns the old Information value of the Drug.
// If the Drug object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DrugMutation) OldInformation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInformation is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInformation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInformation: %w", err)
	}
	return oldValue.Information, nil
}

// ResetInformation reset all changes of the "Information" field.
func (m *DrugMutation) ResetInformation() {
	m._Information = nil
}

// SetUserID sets the user edge to User by id.
func (m *DrugMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the user edge to User.
func (m *DrugMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the edge user was cleared.
func (m *DrugMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the user id in the mutation.
func (m *DrugMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the user ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *DrugMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser reset all changes of the "user" edge.
func (m *DrugMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetFormID sets the form edge to Form by id.
func (m *DrugMutation) SetFormID(id int) {
	m.form = &id
}

// ClearForm clears the form edge to Form.
func (m *DrugMutation) ClearForm() {
	m.clearedform = true
}

// FormCleared returns if the edge form was cleared.
func (m *DrugMutation) FormCleared() bool {
	return m.clearedform
}

// FormID returns the form id in the mutation.
func (m *DrugMutation) FormID() (id int, exists bool) {
	if m.form != nil {
		return *m.form, true
	}
	return
}

// FormIDs returns the form ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// FormID instead. It exists only for internal usage by the builders.
func (m *DrugMutation) FormIDs() (ids []int) {
	if id := m.form; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetForm reset all changes of the "form" edge.
func (m *DrugMutation) ResetForm() {
	m.form = nil
	m.clearedform = false
}

// SetUnitID sets the unit edge to Unit by id.
func (m *DrugMutation) SetUnitID(id int) {
	m.unit = &id
}

// ClearUnit clears the unit edge to Unit.
func (m *DrugMutation) ClearUnit() {
	m.clearedunit = true
}

// UnitCleared returns if the edge unit was cleared.
func (m *DrugMutation) UnitCleared() bool {
	return m.clearedunit
}

// UnitID returns the unit id in the mutation.
func (m *DrugMutation) UnitID() (id int, exists bool) {
	if m.unit != nil {
		return *m.unit, true
	}
	return
}

// UnitIDs returns the unit ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UnitID instead. It exists only for internal usage by the builders.
func (m *DrugMutation) UnitIDs() (ids []int) {
	if id := m.unit; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUnit reset all changes of the "unit" edge.
func (m *DrugMutation) ResetUnit() {
	m.unit = nil
	m.clearedunit = false
}

// SetVolumeID sets the volume edge to Volume by id.
func (m *DrugMutation) SetVolumeID(id int) {
	m.volume = &id
}

// ClearVolume clears the volume edge to Volume.
func (m *DrugMutation) ClearVolume() {
	m.clearedvolume = true
}

// VolumeCleared returns if the edge volume was cleared.
func (m *DrugMutation) VolumeCleared() bool {
	return m.clearedvolume
}

// VolumeID returns the volume id in the mutation.
func (m *DrugMutation) VolumeID() (id int, exists bool) {
	if m.volume != nil {
		return *m.volume, true
	}
	return
}

// VolumeIDs returns the volume ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// VolumeID instead. It exists only for internal usage by the builders.
func (m *DrugMutation) VolumeIDs() (ids []int) {
	if id := m.volume; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVolume reset all changes of the "volume" edge.
func (m *DrugMutation) ResetVolume() {
	m.volume = nil
	m.clearedvolume = false
}

// Op returns the operation name.
func (m *DrugMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Drug).
func (m *DrugMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DrugMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._DrugType != nil {
		fields = append(fields, drug.FieldDrugType)
	}
	if m._Strength != nil {
		fields = append(fields, drug.FieldStrength)
	}
	if m._Information != nil {
		fields = append(fields, drug.FieldInformation)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DrugMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case drug.FieldDrugType:
		return m.DrugType()
	case drug.FieldStrength:
		return m.Strength()
	case drug.FieldInformation:
		return m.Information()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DrugMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case drug.FieldDrugType:
		return m.OldDrugType(ctx)
	case drug.FieldStrength:
		return m.OldStrength(ctx)
	case drug.FieldInformation:
		return m.OldInformation(ctx)
	}
	return nil, fmt.Errorf("unknown Drug field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DrugMutation) SetField(name string, value ent.Value) error {
	switch name {
	case drug.FieldDrugType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDrugType(v)
		return nil
	case drug.FieldStrength:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStrength(v)
		return nil
	case drug.FieldInformation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInformation(v)
		return nil
	}
	return fmt.Errorf("unknown Drug field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DrugMutation) AddedFields() []string {
	var fields []string
	if m.add_Strength != nil {
		fields = append(fields, drug.FieldStrength)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DrugMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case drug.FieldStrength:
		return m.AddedStrength()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DrugMutation) AddField(name string, value ent.Value) error {
	switch name {
	case drug.FieldStrength:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStrength(v)
		return nil
	}
	return fmt.Errorf("unknown Drug numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DrugMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DrugMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DrugMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Drug nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DrugMutation) ResetField(name string) error {
	switch name {
	case drug.FieldDrugType:
		m.ResetDrugType()
		return nil
	case drug.FieldStrength:
		m.ResetStrength()
		return nil
	case drug.FieldInformation:
		m.ResetInformation()
		return nil
	}
	return fmt.Errorf("unknown Drug field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DrugMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.user != nil {
		edges = append(edges, drug.EdgeUser)
	}
	if m.form != nil {
		edges = append(edges, drug.EdgeForm)
	}
	if m.unit != nil {
		edges = append(edges, drug.EdgeUnit)
	}
	if m.volume != nil {
		edges = append(edges, drug.EdgeVolume)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DrugMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case drug.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case drug.EdgeForm:
		if id := m.form; id != nil {
			return []ent.Value{*id}
		}
	case drug.EdgeUnit:
		if id := m.unit; id != nil {
			return []ent.Value{*id}
		}
	case drug.EdgeVolume:
		if id := m.volume; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DrugMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DrugMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DrugMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareduser {
		edges = append(edges, drug.EdgeUser)
	}
	if m.clearedform {
		edges = append(edges, drug.EdgeForm)
	}
	if m.clearedunit {
		edges = append(edges, drug.EdgeUnit)
	}
	if m.clearedvolume {
		edges = append(edges, drug.EdgeVolume)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DrugMutation) EdgeCleared(name string) bool {
	switch name {
	case drug.EdgeUser:
		return m.cleareduser
	case drug.EdgeForm:
		return m.clearedform
	case drug.EdgeUnit:
		return m.clearedunit
	case drug.EdgeVolume:
		return m.clearedvolume
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DrugMutation) ClearEdge(name string) error {
	switch name {
	case drug.EdgeUser:
		m.ClearUser()
		return nil
	case drug.EdgeForm:
		m.ClearForm()
		return nil
	case drug.EdgeUnit:
		m.ClearUnit()
		return nil
	case drug.EdgeVolume:
		m.ClearVolume()
		return nil
	}
	return fmt.Errorf("unknown Drug unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DrugMutation) ResetEdge(name string) error {
	switch name {
	case drug.EdgeUser:
		m.ResetUser()
		return nil
	case drug.EdgeForm:
		m.ResetForm()
		return nil
	case drug.EdgeUnit:
		m.ResetUnit()
		return nil
	case drug.EdgeVolume:
		m.ResetVolume()
		return nil
	}
	return fmt.Errorf("unknown Drug edge %s", name)
}

// FormMutation represents an operation that mutate the Forms
// nodes in the graph.
type FormMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_FormType     *string
	clearedFields map[string]struct{}
	drugs         map[int]struct{}
	removeddrugs  map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*Form, error)
}

var _ ent.Mutation = (*FormMutation)(nil)

// formOption allows to manage the mutation configuration using functional options.
type formOption func(*FormMutation)

// newFormMutation creates new mutation for $n.Name.
func newFormMutation(c config, op Op, opts ...formOption) *FormMutation {
	m := &FormMutation{
		config:        c,
		op:            op,
		typ:           TypeForm,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFormID sets the id field of the mutation.
func withFormID(id int) formOption {
	return func(m *FormMutation) {
		var (
			err   error
			once  sync.Once
			value *Form
		)
		m.oldValue = func(ctx context.Context) (*Form, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Form.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withForm sets the old Form of the mutation.
func withForm(node *Form) formOption {
	return func(m *FormMutation) {
		m.oldValue = func(context.Context) (*Form, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FormMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FormMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *FormMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetFormType sets the FormType field.
func (m *FormMutation) SetFormType(s string) {
	m._FormType = &s
}

// FormType returns the FormType value in the mutation.
func (m *FormMutation) FormType() (r string, exists bool) {
	v := m._FormType
	if v == nil {
		return
	}
	return *v, true
}

// OldFormType returns the old FormType value of the Form.
// If the Form object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FormMutation) OldFormType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFormType is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFormType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFormType: %w", err)
	}
	return oldValue.FormType, nil
}

// ResetFormType reset all changes of the "FormType" field.
func (m *FormMutation) ResetFormType() {
	m._FormType = nil
}

// AddDrugIDs adds the drugs edge to Drug by ids.
func (m *FormMutation) AddDrugIDs(ids ...int) {
	if m.drugs == nil {
		m.drugs = make(map[int]struct{})
	}
	for i := range ids {
		m.drugs[ids[i]] = struct{}{}
	}
}

// RemoveDrugIDs removes the drugs edge to Drug by ids.
func (m *FormMutation) RemoveDrugIDs(ids ...int) {
	if m.removeddrugs == nil {
		m.removeddrugs = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddrugs[ids[i]] = struct{}{}
	}
}

// RemovedDrugs returns the removed ids of drugs.
func (m *FormMutation) RemovedDrugsIDs() (ids []int) {
	for id := range m.removeddrugs {
		ids = append(ids, id)
	}
	return
}

// DrugsIDs returns the drugs ids in the mutation.
func (m *FormMutation) DrugsIDs() (ids []int) {
	for id := range m.drugs {
		ids = append(ids, id)
	}
	return
}

// ResetDrugs reset all changes of the "drugs" edge.
func (m *FormMutation) ResetDrugs() {
	m.drugs = nil
	m.removeddrugs = nil
}

// Op returns the operation name.
func (m *FormMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Form).
func (m *FormMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *FormMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._FormType != nil {
		fields = append(fields, form.FieldFormType)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *FormMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case form.FieldFormType:
		return m.FormType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *FormMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case form.FieldFormType:
		return m.OldFormType(ctx)
	}
	return nil, fmt.Errorf("unknown Form field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *FormMutation) SetField(name string, value ent.Value) error {
	switch name {
	case form.FieldFormType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFormType(v)
		return nil
	}
	return fmt.Errorf("unknown Form field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *FormMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *FormMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *FormMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Form numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *FormMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *FormMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *FormMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Form nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *FormMutation) ResetField(name string) error {
	switch name {
	case form.FieldFormType:
		m.ResetFormType()
		return nil
	}
	return fmt.Errorf("unknown Form field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *FormMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.drugs != nil {
		edges = append(edges, form.EdgeDrugs)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *FormMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case form.EdgeDrugs:
		ids := make([]ent.Value, 0, len(m.drugs))
		for id := range m.drugs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *FormMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddrugs != nil {
		edges = append(edges, form.EdgeDrugs)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *FormMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case form.EdgeDrugs:
		ids := make([]ent.Value, 0, len(m.removeddrugs))
		for id := range m.removeddrugs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *FormMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *FormMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *FormMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Form unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *FormMutation) ResetEdge(name string) error {
	switch name {
	case form.EdgeDrugs:
		m.ResetDrugs()
		return nil
	}
	return fmt.Errorf("unknown Form edge %s", name)
}

// UnitMutation represents an operation that mutate the Units
// nodes in the graph.
type UnitMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_UnitType     *string
	clearedFields map[string]struct{}
	drugs         map[int]struct{}
	removeddrugs  map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*Unit, error)
}

var _ ent.Mutation = (*UnitMutation)(nil)

// unitOption allows to manage the mutation configuration using functional options.
type unitOption func(*UnitMutation)

// newUnitMutation creates new mutation for $n.Name.
func newUnitMutation(c config, op Op, opts ...unitOption) *UnitMutation {
	m := &UnitMutation{
		config:        c,
		op:            op,
		typ:           TypeUnit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUnitID sets the id field of the mutation.
func withUnitID(id int) unitOption {
	return func(m *UnitMutation) {
		var (
			err   error
			once  sync.Once
			value *Unit
		)
		m.oldValue = func(ctx context.Context) (*Unit, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Unit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUnit sets the old Unit of the mutation.
func withUnit(node *Unit) unitOption {
	return func(m *UnitMutation) {
		m.oldValue = func(context.Context) (*Unit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UnitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UnitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UnitMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUnitType sets the UnitType field.
func (m *UnitMutation) SetUnitType(s string) {
	m._UnitType = &s
}

// UnitType returns the UnitType value in the mutation.
func (m *UnitMutation) UnitType() (r string, exists bool) {
	v := m._UnitType
	if v == nil {
		return
	}
	return *v, true
}

// OldUnitType returns the old UnitType value of the Unit.
// If the Unit object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UnitMutation) OldUnitType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUnitType is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUnitType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnitType: %w", err)
	}
	return oldValue.UnitType, nil
}

// ResetUnitType reset all changes of the "UnitType" field.
func (m *UnitMutation) ResetUnitType() {
	m._UnitType = nil
}

// AddDrugIDs adds the drugs edge to Drug by ids.
func (m *UnitMutation) AddDrugIDs(ids ...int) {
	if m.drugs == nil {
		m.drugs = make(map[int]struct{})
	}
	for i := range ids {
		m.drugs[ids[i]] = struct{}{}
	}
}

// RemoveDrugIDs removes the drugs edge to Drug by ids.
func (m *UnitMutation) RemoveDrugIDs(ids ...int) {
	if m.removeddrugs == nil {
		m.removeddrugs = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddrugs[ids[i]] = struct{}{}
	}
}

// RemovedDrugs returns the removed ids of drugs.
func (m *UnitMutation) RemovedDrugsIDs() (ids []int) {
	for id := range m.removeddrugs {
		ids = append(ids, id)
	}
	return
}

// DrugsIDs returns the drugs ids in the mutation.
func (m *UnitMutation) DrugsIDs() (ids []int) {
	for id := range m.drugs {
		ids = append(ids, id)
	}
	return
}

// ResetDrugs reset all changes of the "drugs" edge.
func (m *UnitMutation) ResetDrugs() {
	m.drugs = nil
	m.removeddrugs = nil
}

// Op returns the operation name.
func (m *UnitMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Unit).
func (m *UnitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UnitMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._UnitType != nil {
		fields = append(fields, unit.FieldUnitType)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UnitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case unit.FieldUnitType:
		return m.UnitType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UnitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case unit.FieldUnitType:
		return m.OldUnitType(ctx)
	}
	return nil, fmt.Errorf("unknown Unit field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UnitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case unit.FieldUnitType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnitType(v)
		return nil
	}
	return fmt.Errorf("unknown Unit field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UnitMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UnitMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UnitMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Unit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UnitMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UnitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UnitMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Unit nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UnitMutation) ResetField(name string) error {
	switch name {
	case unit.FieldUnitType:
		m.ResetUnitType()
		return nil
	}
	return fmt.Errorf("unknown Unit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UnitMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.drugs != nil {
		edges = append(edges, unit.EdgeDrugs)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UnitMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case unit.EdgeDrugs:
		ids := make([]ent.Value, 0, len(m.drugs))
		for id := range m.drugs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UnitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddrugs != nil {
		edges = append(edges, unit.EdgeDrugs)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UnitMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case unit.EdgeDrugs:
		ids := make([]ent.Value, 0, len(m.removeddrugs))
		for id := range m.removeddrugs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UnitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UnitMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UnitMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Unit unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UnitMutation) ResetEdge(name string) error {
	switch name {
	case unit.EdgeDrugs:
		m.ResetDrugs()
		return nil
	}
	return fmt.Errorf("unknown Unit edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_Username     *string
	_Email        *string
	_Password     *string
	clearedFields map[string]struct{}
	drugs         map[int]struct{}
	removeddrugs  map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUsername sets the Username field.
func (m *UserMutation) SetUsername(s string) {
	m._Username = &s
}

// Username returns the Username value in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m._Username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old Username value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsername is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername reset all changes of the "Username" field.
func (m *UserMutation) ResetUsername() {
	m._Username = nil
}

// SetEmail sets the Email field.
func (m *UserMutation) SetEmail(s string) {
	m._Email = &s
}

// Email returns the Email value in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m._Email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old Email value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "Email" field.
func (m *UserMutation) ResetEmail() {
	m._Email = nil
}

// SetPassword sets the Password field.
func (m *UserMutation) SetPassword(s string) {
	m._Password = &s
}

// Password returns the Password value in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m._Password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old Password value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword reset all changes of the "Password" field.
func (m *UserMutation) ResetPassword() {
	m._Password = nil
}

// AddDrugIDs adds the drugs edge to Drug by ids.
func (m *UserMutation) AddDrugIDs(ids ...int) {
	if m.drugs == nil {
		m.drugs = make(map[int]struct{})
	}
	for i := range ids {
		m.drugs[ids[i]] = struct{}{}
	}
}

// RemoveDrugIDs removes the drugs edge to Drug by ids.
func (m *UserMutation) RemoveDrugIDs(ids ...int) {
	if m.removeddrugs == nil {
		m.removeddrugs = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddrugs[ids[i]] = struct{}{}
	}
}

// RemovedDrugs returns the removed ids of drugs.
func (m *UserMutation) RemovedDrugsIDs() (ids []int) {
	for id := range m.removeddrugs {
		ids = append(ids, id)
	}
	return
}

// DrugsIDs returns the drugs ids in the mutation.
func (m *UserMutation) DrugsIDs() (ids []int) {
	for id := range m.drugs {
		ids = append(ids, id)
	}
	return
}

// ResetDrugs reset all changes of the "drugs" edge.
func (m *UserMutation) ResetDrugs() {
	m.drugs = nil
	m.removeddrugs = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._Username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m._Email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m._Password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.drugs != nil {
		edges = append(edges, user.EdgeDrugs)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeDrugs:
		ids := make([]ent.Value, 0, len(m.drugs))
		for id := range m.drugs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddrugs != nil {
		edges = append(edges, user.EdgeDrugs)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeDrugs:
		ids := make([]ent.Value, 0, len(m.removeddrugs))
		for id := range m.removeddrugs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeDrugs:
		m.ResetDrugs()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// VolumeMutation represents an operation that mutate the Volumes
// nodes in the graph.
type VolumeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_VolumeType   *string
	clearedFields map[string]struct{}
	drugs         map[int]struct{}
	removeddrugs  map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*Volume, error)
}

var _ ent.Mutation = (*VolumeMutation)(nil)

// volumeOption allows to manage the mutation configuration using functional options.
type volumeOption func(*VolumeMutation)

// newVolumeMutation creates new mutation for $n.Name.
func newVolumeMutation(c config, op Op, opts ...volumeOption) *VolumeMutation {
	m := &VolumeMutation{
		config:        c,
		op:            op,
		typ:           TypeVolume,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVolumeID sets the id field of the mutation.
func withVolumeID(id int) volumeOption {
	return func(m *VolumeMutation) {
		var (
			err   error
			once  sync.Once
			value *Volume
		)
		m.oldValue = func(ctx context.Context) (*Volume, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Volume.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVolume sets the old Volume of the mutation.
func withVolume(node *Volume) volumeOption {
	return func(m *VolumeMutation) {
		m.oldValue = func(context.Context) (*Volume, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VolumeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VolumeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *VolumeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetVolumeType sets the VolumeType field.
func (m *VolumeMutation) SetVolumeType(s string) {
	m._VolumeType = &s
}

// VolumeType returns the VolumeType value in the mutation.
func (m *VolumeMutation) VolumeType() (r string, exists bool) {
	v := m._VolumeType
	if v == nil {
		return
	}
	return *v, true
}

// OldVolumeType returns the old VolumeType value of the Volume.
// If the Volume object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *VolumeMutation) OldVolumeType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVolumeType is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVolumeType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVolumeType: %w", err)
	}
	return oldValue.VolumeType, nil
}

// ResetVolumeType reset all changes of the "VolumeType" field.
func (m *VolumeMutation) ResetVolumeType() {
	m._VolumeType = nil
}

// AddDrugIDs adds the drugs edge to Drug by ids.
func (m *VolumeMutation) AddDrugIDs(ids ...int) {
	if m.drugs == nil {
		m.drugs = make(map[int]struct{})
	}
	for i := range ids {
		m.drugs[ids[i]] = struct{}{}
	}
}

// RemoveDrugIDs removes the drugs edge to Drug by ids.
func (m *VolumeMutation) RemoveDrugIDs(ids ...int) {
	if m.removeddrugs == nil {
		m.removeddrugs = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddrugs[ids[i]] = struct{}{}
	}
}

// RemovedDrugs returns the removed ids of drugs.
func (m *VolumeMutation) RemovedDrugsIDs() (ids []int) {
	for id := range m.removeddrugs {
		ids = append(ids, id)
	}
	return
}

// DrugsIDs returns the drugs ids in the mutation.
func (m *VolumeMutation) DrugsIDs() (ids []int) {
	for id := range m.drugs {
		ids = append(ids, id)
	}
	return
}

// ResetDrugs reset all changes of the "drugs" edge.
func (m *VolumeMutation) ResetDrugs() {
	m.drugs = nil
	m.removeddrugs = nil
}

// Op returns the operation name.
func (m *VolumeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Volume).
func (m *VolumeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *VolumeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._VolumeType != nil {
		fields = append(fields, volume.FieldVolumeType)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *VolumeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case volume.FieldVolumeType:
		return m.VolumeType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *VolumeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case volume.FieldVolumeType:
		return m.OldVolumeType(ctx)
	}
	return nil, fmt.Errorf("unknown Volume field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *VolumeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case volume.FieldVolumeType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVolumeType(v)
		return nil
	}
	return fmt.Errorf("unknown Volume field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *VolumeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *VolumeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *VolumeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Volume numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *VolumeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *VolumeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *VolumeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Volume nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *VolumeMutation) ResetField(name string) error {
	switch name {
	case volume.FieldVolumeType:
		m.ResetVolumeType()
		return nil
	}
	return fmt.Errorf("unknown Volume field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *VolumeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.drugs != nil {
		edges = append(edges, volume.EdgeDrugs)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *VolumeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case volume.EdgeDrugs:
		ids := make([]ent.Value, 0, len(m.drugs))
		for id := range m.drugs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *VolumeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddrugs != nil {
		edges = append(edges, volume.EdgeDrugs)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *VolumeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case volume.EdgeDrugs:
		ids := make([]ent.Value, 0, len(m.removeddrugs))
		for id := range m.removeddrugs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *VolumeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *VolumeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *VolumeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Volume unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *VolumeMutation) ResetEdge(name string) error {
	switch name {
	case volume.EdgeDrugs:
		m.ResetDrugs()
		return nil
	}
	return fmt.Errorf("unknown Volume edge %s", name)
}
