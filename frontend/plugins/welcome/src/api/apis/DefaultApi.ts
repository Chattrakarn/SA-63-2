/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EntDrug,
    EntDrugFromJSON,
    EntDrugToJSON,
    EntForm,
    EntFormFromJSON,
    EntFormToJSON,
    EntUnit,
    EntUnitFromJSON,
    EntUnitToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
    EntVolume,
    EntVolumeFromJSON,
    EntVolumeToJSON,
} from '../models';

export interface CreateDrugRequest {
    drug: EntDrug;
}

export interface CreateFormRequest {
    form: EntForm;
}

export interface CreateUnitRequest {
    unit: EntUnit;
}

export interface CreateUserRequest {
    user: EntUser;
}

export interface CreateVolumeRequest {
    volume: EntVolume;
}

export interface DeleteDrugRequest {
    id: number;
}

export interface DeleteUnitRequest {
    id: number;
}

export interface DeleteVolumeRequest {
    id: number;
}

export interface GetDrugRequest {
    id: number;
}

export interface GetFormRequest {
    id: number;
}

export interface GetUnitRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface GetVolumeRequest {
    id: number;
}

export interface ListDrugRequest {
    limit?: number;
    offset?: number;
}

export interface ListFormRequest {
    limit?: number;
    offset?: number;
}

export interface ListUnitRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserRequest {
    limit?: number;
    offset?: number;
}

export interface ListVolumeRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateDrugRequest {
    id: number;
    drug: EntDrug;
}

export interface UpdateUnitRequest {
    id: number;
    unit: EntUnit;
}

export interface UpdateVolumeRequest {
    id: number;
    volume: EntVolume;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create drug
     * Create drug
     */
    async createDrugRaw(requestParameters: CreateDrugRequest): Promise<runtime.ApiResponse<EntDrug>> {
        if (requestParameters.drug === null || requestParameters.drug === undefined) {
            throw new runtime.RequiredError('drug','Required parameter requestParameters.drug was null or undefined when calling createDrug.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/drugs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDrugToJSON(requestParameters.drug),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDrugFromJSON(jsonValue));
    }

    /**
     * Create drug
     * Create drug
     */
    async createDrug(requestParameters: CreateDrugRequest): Promise<EntDrug> {
        const response = await this.createDrugRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create form
     * Create form
     */
    async createFormRaw(requestParameters: CreateFormRequest): Promise<runtime.ApiResponse<EntForm>> {
        if (requestParameters.form === null || requestParameters.form === undefined) {
            throw new runtime.RequiredError('form','Required parameter requestParameters.form was null or undefined when calling createForm.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/forms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntFormToJSON(requestParameters.form),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFormFromJSON(jsonValue));
    }

    /**
     * Create form
     * Create form
     */
    async createForm(requestParameters: CreateFormRequest): Promise<EntForm> {
        const response = await this.createFormRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create unit
     * Create unit
     */
    async createUnitRaw(requestParameters: CreateUnitRequest): Promise<runtime.ApiResponse<EntUnit>> {
        if (requestParameters.unit === null || requestParameters.unit === undefined) {
            throw new runtime.RequiredError('unit','Required parameter requestParameters.unit was null or undefined when calling createUnit.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/units`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUnitToJSON(requestParameters.unit),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUnitFromJSON(jsonValue));
    }

    /**
     * Create unit
     * Create unit
     */
    async createUnit(requestParameters: CreateUnitRequest): Promise<EntUnit> {
        const response = await this.createUnitRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create user
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * Create user
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<EntUser> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create volume
     * Create volume
     */
    async createVolumeRaw(requestParameters: CreateVolumeRequest): Promise<runtime.ApiResponse<EntVolume>> {
        if (requestParameters.volume === null || requestParameters.volume === undefined) {
            throw new runtime.RequiredError('volume','Required parameter requestParameters.volume was null or undefined when calling createVolume.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/volumes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntVolumeToJSON(requestParameters.volume),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntVolumeFromJSON(jsonValue));
    }

    /**
     * Create volume
     * Create volume
     */
    async createVolume(requestParameters: CreateVolumeRequest): Promise<EntVolume> {
        const response = await this.createVolumeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get drug by ID
     * Delete a drug entity by ID
     */
    async deleteDrugRaw(requestParameters: DeleteDrugRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDrug.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drugs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get drug by ID
     * Delete a drug entity by ID
     */
    async deleteDrug(requestParameters: DeleteDrugRequest): Promise<object> {
        const response = await this.deleteDrugRaw(requestParameters);
        return await response.value();
    }

    /**
     * get unit by ID
     * Delete a unit entity by ID
     */
    async deleteUnitRaw(requestParameters: DeleteUnitRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUnit.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/units/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get unit by ID
     * Delete a unit entity by ID
     */
    async deleteUnit(requestParameters: DeleteUnitRequest): Promise<object> {
        const response = await this.deleteUnitRaw(requestParameters);
        return await response.value();
    }

    /**
     * get volume by ID
     * Delete a volume entity by ID
     */
    async deleteVolumeRaw(requestParameters: DeleteVolumeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteVolume.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/volumes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get volume by ID
     * Delete a volume entity by ID
     */
    async deleteVolume(requestParameters: DeleteVolumeRequest): Promise<object> {
        const response = await this.deleteVolumeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get drug by ID
     * Get a drug entity by ID
     */
    async getDrugRaw(requestParameters: GetDrugRequest): Promise<runtime.ApiResponse<EntDrug>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDrug.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drugs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDrugFromJSON(jsonValue));
    }

    /**
     * get drug by ID
     * Get a drug entity by ID
     */
    async getDrug(requestParameters: GetDrugRequest): Promise<EntDrug> {
        const response = await this.getDrugRaw(requestParameters);
        return await response.value();
    }

    /**
     * get form by ID
     * Get a form entity by ID
     */
    async getFormRaw(requestParameters: GetFormRequest): Promise<runtime.ApiResponse<EntForm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getForm.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/forms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFormFromJSON(jsonValue));
    }

    /**
     * get form by ID
     * Get a form entity by ID
     */
    async getForm(requestParameters: GetFormRequest): Promise<EntForm> {
        const response = await this.getFormRaw(requestParameters);
        return await response.value();
    }

    /**
     * get unit by ID
     * Get a unit entity by ID
     */
    async getUnitRaw(requestParameters: GetUnitRequest): Promise<runtime.ApiResponse<EntUnit>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUnit.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/units/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUnitFromJSON(jsonValue));
    }

    /**
     * get unit by ID
     * Get a unit entity by ID
     */
    async getUnit(requestParameters: GetUnitRequest): Promise<EntUnit> {
        const response = await this.getUnitRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get volume by ID
     * Get a volume entity by ID
     */
    async getVolumeRaw(requestParameters: GetVolumeRequest): Promise<runtime.ApiResponse<EntVolume>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getVolume.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/volumes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntVolumeFromJSON(jsonValue));
    }

    /**
     * get volume by ID
     * Get a volume entity by ID
     */
    async getVolume(requestParameters: GetVolumeRequest): Promise<EntVolume> {
        const response = await this.getVolumeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list drug entities
     * List drug entities
     */
    async listDrugRaw(requestParameters: ListDrugRequest): Promise<runtime.ApiResponse<Array<EntDrug>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drugs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDrugFromJSON));
    }

    /**
     * list drug entities
     * List drug entities
     */
    async listDrug(requestParameters: ListDrugRequest): Promise<Array<EntDrug>> {
        const response = await this.listDrugRaw(requestParameters);
        return await response.value();
    }

    /**
     * list form entities
     * List form entities
     */
    async listFormRaw(requestParameters: ListFormRequest): Promise<runtime.ApiResponse<Array<EntForm>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/forms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntFormFromJSON));
    }

    /**
     * list form entities
     * List form entities
     */
    async listForm(requestParameters: ListFormRequest): Promise<Array<EntForm>> {
        const response = await this.listFormRaw(requestParameters);
        return await response.value();
    }

    /**
     * list unit entities
     * List unit entities
     */
    async listUnitRaw(requestParameters: ListUnitRequest): Promise<runtime.ApiResponse<Array<EntUnit>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/units`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUnitFromJSON));
    }

    /**
     * list unit entities
     * List unit entities
     */
    async listUnit(requestParameters: ListUnitRequest): Promise<Array<EntUnit>> {
        const response = await this.listUnitRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(requestParameters: ListUserRequest): Promise<Array<EntUser>> {
        const response = await this.listUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list volume entities
     * List volume entities
     */
    async listVolumeRaw(requestParameters: ListVolumeRequest): Promise<runtime.ApiResponse<Array<EntVolume>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/volumes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntVolumeFromJSON));
    }

    /**
     * list volume entities
     * List volume entities
     */
    async listVolume(requestParameters: ListVolumeRequest): Promise<Array<EntVolume>> {
        const response = await this.listVolumeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update drug by ID
     * Update a drug entity by ID
     */
    async updateDrugRaw(requestParameters: UpdateDrugRequest): Promise<runtime.ApiResponse<EntDrug>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDrug.');
        }

        if (requestParameters.drug === null || requestParameters.drug === undefined) {
            throw new runtime.RequiredError('drug','Required parameter requestParameters.drug was null or undefined when calling updateDrug.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/drugs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDrugToJSON(requestParameters.drug),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDrugFromJSON(jsonValue));
    }

    /**
     * update drug by ID
     * Update a drug entity by ID
     */
    async updateDrug(requestParameters: UpdateDrugRequest): Promise<EntDrug> {
        const response = await this.updateDrugRaw(requestParameters);
        return await response.value();
    }

    /**
     * update unit by ID
     * Update a unit entity by ID
     */
    async updateUnitRaw(requestParameters: UpdateUnitRequest): Promise<runtime.ApiResponse<EntUnit>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUnit.');
        }

        if (requestParameters.unit === null || requestParameters.unit === undefined) {
            throw new runtime.RequiredError('unit','Required parameter requestParameters.unit was null or undefined when calling updateUnit.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/units/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUnitToJSON(requestParameters.unit),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUnitFromJSON(jsonValue));
    }

    /**
     * update unit by ID
     * Update a unit entity by ID
     */
    async updateUnit(requestParameters: UpdateUnitRequest): Promise<EntUnit> {
        const response = await this.updateUnitRaw(requestParameters);
        return await response.value();
    }

    /**
     * update volume by ID
     * Update a volume entity by ID
     */
    async updateVolumeRaw(requestParameters: UpdateVolumeRequest): Promise<runtime.ApiResponse<EntVolume>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateVolume.');
        }

        if (requestParameters.volume === null || requestParameters.volume === undefined) {
            throw new runtime.RequiredError('volume','Required parameter requestParameters.volume was null or undefined when calling updateVolume.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/volumes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntVolumeToJSON(requestParameters.volume),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntVolumeFromJSON(jsonValue));
    }

    /**
     * update volume by ID
     * Update a volume entity by ID
     */
    async updateVolume(requestParameters: UpdateVolumeRequest): Promise<EntVolume> {
        const response = await this.updateVolumeRaw(requestParameters);
        return await response.value();
    }

}
